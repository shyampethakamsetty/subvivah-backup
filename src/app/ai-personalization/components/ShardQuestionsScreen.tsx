'use client';

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useLanguage } from '@/context/LanguageContext';
import SpeakingAvatar from './SpeakingAvatar';

interface ShardQuestionsScreenProps {
  onNext: (data: any) => void;
  onBack: () => void;
  initialData?: any;
}

interface ShardQuestion {
  id: string;
  title: { hi: string; en: string };
  description: { hi: string; en: string };
  options: Array<{
    id: string;
    label: { hi: string; en: string };
    icon: string;
    value: string;
  }>;
}

const shardQuestions: ShardQuestion[] = [
  {
    id: 'food_preference',
    title: { hi: 'ЁЯН╜я╕П рдЖрдкрдХреА рдЦрд╛рдиреЗ рдХреА рдкрд╕рдВрдж рдХреНрдпрд╛ рд╣реИ?', en: 'ЁЯН╜я╕П What\'s your food preference?' },
    description: { 
      hi: 'рдЦрд╛рдиреЗ рдХреА рдкрд╕рдВрдж рджреИрдирд┐рдХ рдЬреАрд╡рди рдФрд░ рдкрд░рд┐рд╡рд╛рд░ рдореЗрдВ рд╕реНрд╡реАрдХреГрддрд┐ рдХреЛ рдкреНрд░рднрд╛рд╡рд┐рдд рдХрд░рддреА рд╣реИред', 
      en: 'Food choices strongly influence daily compatibility and family acceptance.' 
    },
    options: [
      { id: 'vegetarian', label: { hi: 'ЁЯеЧ рд╢рд╛рдХрд╛рд╣рд╛рд░реА', en: 'ЁЯеЧ Vegetarian' }, icon: 'ЁЯеЧ', value: 'vegetarian' },
      { id: 'non_vegetarian', label: { hi: 'ЁЯНЧ рдорд╛рдВрд╕рд╛рд╣рд╛рд░реА', en: 'ЁЯНЧ Non-Vegetarian' }, icon: 'ЁЯНЧ', value: 'non_vegetarian' },
      { id: 'eggetarian', label: { hi: 'ЁЯеЪ рдЕрдВрдбрд╛рд╢рд╛рдХрд╛рд╣рд╛рд░реА', en: 'ЁЯеЪ Eggetarian' }, icon: 'ЁЯеЪ', value: 'eggetarian' },
      { id: 'vegan', label: { hi: 'ЁЯМ▒ рд╢реБрджреНрдз рд╢рд╛рдХрд╛рд╣рд╛рд░реА', en: 'ЁЯМ▒ Vegan' }, icon: 'ЁЯМ▒', value: 'vegan' },
      { id: 'no_preference', label: { hi: 'тЭМ рдХреЛрдИ рдкрд╕рдВрдж рдирд╣реАрдВ', en: 'тЭМ No Preference' }, icon: 'тЭМ', value: 'no_preference' }
    ]
  },
  {
    id: 'sleep_schedule',
    title: { hi: 'ЁЯМД рдЖрдк рд╕реБрдмрд╣ рдпрд╛ рд░рд╛рдд рдХреЗ рд╡реНрдпрдХреНрддрд┐ рд╣реИрдВ?', en: 'ЁЯМД Are you a morning or night person?' },
    description: { 
      hi: 'рджреИрдирд┐рдХ рджрд┐рдирдЪрд░реНрдпрд╛ рдФрд░ рдКрд░реНрдЬрд╛ рд╕реНрддрд░ рдХреЛ рдорд┐рд▓рд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред', 
      en: 'Helps match daily routines and energy levels.' 
    },
    options: [
      { id: 'morning', label: { hi: 'ЁЯМЮ рд╕реБрдмрд╣ рдХреЗ рд╢реМрдХреАрди', en: 'ЁЯМЮ Morning Lover' }, icon: 'ЁЯМЮ', value: 'morning' },
      { id: 'night', label: { hi: 'ЁЯМЩ рд░рд╛рдд рдХреЗ рдЙрд▓реНрд▓реВ', en: 'ЁЯМЩ Night Owl' }, icon: 'ЁЯМЩ', value: 'night' },
      { id: 'flexible', label: { hi: 'тП░ рд▓рдЪреАрд▓рд╛', en: 'тП░ Flexible' }, icon: 'тП░', value: 'flexible' }
    ]
  },
  {
    id: 'social_personality',
    title: { hi: 'ЁЯСе рдЖрдкрдХреА рд╕рд╛рдорд╛рдЬрд┐рдХ рд╡реНрдпрдХреНрддрд┐рддреНрд╡ рдХреНрдпрд╛ рд╣реИ?', en: 'ЁЯСе What best describes your social personality?' },
    description: { 
      hi: 'рдмрд╛рддрдЪреАрдд рдХреЗ рддрд░реАрдХреЗ рдФрд░ рдЬреАрд╡рдирд╢реИрд▓реА рдХреЗ рд╕рдВрд░реЗрдЦрдг рдХреЛ рджрд░реНрд╢рд╛рддрд╛ рд╣реИред', 
      en: 'Indicates interaction style and lifestyle alignment.' 
    },
    options: [
      { id: 'extrovert', label: { hi: 'ЁЯЧгя╕П рдмрд╣рд┐рд░реНрдореБрдЦреА', en: 'ЁЯЧгя╕П Extrovert' }, icon: 'ЁЯЧгя╕П', value: 'extrovert' },
      { id: 'introvert', label: { hi: 'ЁЯдл рдЕрдВрддрд░реНрдореБрдЦреА', en: 'ЁЯдл Introvert' }, icon: 'ЁЯдл', value: 'introvert' },
      { id: 'ambivert', label: { hi: 'ЁЯШМ рдорд┐рд╢реНрд░рд┐рдд', en: 'ЁЯШМ Ambivert' }, icon: 'ЁЯШМ', value: 'ambivert' }
    ]
  },
  {
    id: 'religion_spirituality',
    title: { hi: 'ЁЯЫР рдЖрдкрдХреЗ рд▓рд┐рдП рдзрд░реНрдо/рдЖрдзреНрдпрд╛рддреНрдорд┐рдХрддрд╛ рдХрд┐рддрдирд╛ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ?', en: 'ЁЯЫР How important is religion/spirituality to you?' },
    description: { 
      hi: 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдореВрд▓реНрдпреЛрдВ рдФрд░ рдкрд░рд┐рд╡рд╛рд░ рдХреА рдкрд░рдВрдкрд░рд╛рдУрдВ рдкрд░ рд╕рдВрд░реЗрдЦрдгред', 
      en: 'Aligns on cultural values and family traditions.' 
    },
    options: [
      { id: 'very_important', label: { hi: 'ЁЯЩП рдмрд╣реБрдд рдорд╣рддреНрд╡рдкреВрд░реНрдг', en: 'ЁЯЩП Very Important' }, icon: 'ЁЯЩП', value: 'very_important' },
      { id: 'somewhat_spiritual', label: { hi: 'ЁЯзШтАНтЩАя╕П рдХреБрдЫ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ', en: 'ЁЯзШтАНтЩАя╕П Somewhat Spiritual' }, icon: 'ЁЯзШтАНтЩАя╕П', value: 'somewhat_spiritual' },
      { id: 'not_spiritual', label: { hi: 'ЁЯЪл рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдирд╣реАрдВ', en: 'ЁЯЪл Not Spiritual' }, icon: 'ЁЯЪл', value: 'not_spiritual' },
      { id: 'open_to_all', label: { hi: 'ЁЯМН рд╕рднреА рд╡рд┐рд╢реНрд╡рд╛рд╕реЛрдВ рдХреЗ рд▓рд┐рдП рдЦреБрд▓рд╛', en: 'ЁЯМН Open to All Beliefs' }, icon: 'ЁЯМН', value: 'open_to_all' }
    ]
  },
  {
    id: 'relationship_type',
    title: { hi: 'ЁЯСл рдЖрдк рдХрд┐рд╕ рддрд░рд╣ рдХрд╛ рд░рд┐рд╢реНрддрд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?', en: 'ЁЯСл What kind of relationship are you looking for?' },
    description: { 
      hi: 'рднреВрдорд┐рдХрд╛рдУрдВ, рднрд╛рд╡рдирд╛рддреНрдордХ рдЬрд░реВрд░рддреЛрдВ рдФрд░ рдЬреАрд╡рдирд╢реИрд▓реА рдХреЗ рдЕрдиреБрд░реВрдк рдЙрдореНрдореАрджреЛрдВ рдХреЛ рдкреНрд░рдХрдЯ рдХрд░рддрд╛ рд╣реИред', 
      en: 'Reveals expectations around roles, emotional needs, and lifestyle fit.' 
    },
    options: [
      { id: 'emotionally_deep', label: { hi: 'ЁЯТЮ рднрд╛рд╡рдирд╛рддреНрдордХ рд░реВрдк рд╕реЗ рдЧрд╣рд░рд╛', en: 'ЁЯТЮ Emotionally Deep' }, icon: 'ЁЯТЮ', value: 'emotionally_deep' },
      { id: 'equal_supportive', label: { hi: 'ЁЯдЭ рд╕рдорд╛рди рдФрд░ рд╕рд╣рд╛рдпрдХ', en: 'ЁЯдЭ Equal & Supportive' }, icon: 'ЁЯдЭ', value: 'equal_supportive' },
      { id: 'traditional_roles', label: { hi: 'ЁЯПа рдкрд╛рд░рдВрдкрд░рд┐рдХ рднреВрдорд┐рдХрд╛рдПрдВ', en: 'ЁЯПа Traditional Roles' }, icon: 'ЁЯПа', value: 'traditional_roles' },
      { id: 'fun_spontaneous', label: { hi: 'ЁЯОЙ рдордЬрд╝реЗрджрд╛рд░ рдФрд░ рд╕реНрд╡рд╛рднрд╛рд╡рд┐рдХ', en: 'ЁЯОЙ Fun & Spontaneous' }, icon: 'ЁЯОЙ', value: 'fun_spontaneous' }
    ]
  },
  {
    id: 'career_priority',
    title: { hi: 'ЁЯТ╝ рдЖрдкрдХреА рдХрд░рд┐рдпрд░ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдХреНрдпрд╛ рд╣реИ?', en: 'ЁЯТ╝ What\'s your career priority?' },
    description: { 
      hi: 'рдЬреАрд╡рди рдореЗрдВ рдХрд╛рдо, рдкрд░рд┐рд╡рд╛рд░ рдФрд░ рд╕рдВрддреБрд▓рди рдХреА рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдХреЛ рд╕рдордЭрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред', 
      en: 'Helps understand priorities between work, family, and balance in life.' 
    },
    options: [
      { id: 'work_first', label: { hi: 'ЁЯТ╝ рдХрд╛рдо рдкрд╣рд▓реЗ', en: 'ЁЯТ╝ Work-first' }, icon: 'ЁЯТ╝', value: 'work_first' },
      { id: 'balance', label: { hi: 'тЪЦя╕П рд╕рдВрддреБрд▓рди', en: 'тЪЦя╕П Balance' }, icon: 'тЪЦя╕П', value: 'balance' },
      { id: 'family_first', label: { hi: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж рдкрд░рд┐рд╡рд╛рд░ рдкрд╣рд▓реЗ', en: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Family-first' }, icon: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж', value: 'family_first' }
    ]
  },
  {
    id: 'children_preference',
    title: { hi: 'ЁЯС╢ рдмрдЪреНрдЪреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЖрдкрдХреА рдХреНрдпрд╛ рд░рд╛рдп рд╣реИ?', en: 'ЁЯС╢ What\'s your preference about children?' },
    description: { 
      hi: 'рдкрд░рд┐рд╡рд╛рд░ рдирд┐рдпреЛрдЬрди рдФрд░ рднрд╡рд┐рд╖реНрдп рдХреА рдпреЛрдЬрдирд╛рдУрдВ рдХреЛ рд╕рдордЭрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред', 
      en: 'Helps understand family planning and future goals.' 
    },
    options: [
      { id: 'want_kids', label: { hi: 'тЬЕ рдмрдЪреНрдЪреЗ рдЪрд╛рд╣рд┐рдП', en: 'тЬЕ Want kids' }, icon: 'тЬЕ', value: 'want_kids' },
      { id: 'no_kids', label: { hi: 'тЭМ рдмрдЪреНрдЪреЗ рдирд╣реАрдВ рдЪрд╛рд╣рд┐рдП', en: 'тЭМ Don\'t want kids' }, icon: 'тЭМ', value: 'no_kids' },
      { id: 'open_to_both', label: { hi: 'ЁЯдФ рджреЛрдиреЛрдВ рдХреЗ рд▓рд┐рдП рдЦреБрд▓рд╛', en: 'ЁЯдФ Open to both' }, icon: 'ЁЯдФ', value: 'open_to_both' }
    ]
  },
  {
    id: 'living_setup',
    title: { hi: 'ЁЯПа рдЖрдк рдХрд┐рд╕ рддрд░рд╣ рдХрд╛ рд░рд╣рдиреЗ рдХрд╛ рд╕реЗрдЯрдЕрдк рдкрд╕рдВрдж рдХрд░реЗрдВрдЧреЗ?', en: 'ЁЯПа What living setup do you prefer?' },
    description: { 
      hi: 'рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд╕рд╛рде рд░рд╣рдиреЗ рдпрд╛ рд╕реНрд╡рддрдВрддреНрд░ рдЬреАрд╡рди рдХреА рдкрд╕рдВрдж рдХреЛ рд╕рдордЭрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред', 
      en: 'Helps understand preference for living with family or independently.' 
    },
    options: [
      { id: 'independent', label: { hi: 'ЁЯПб рд╕реНрд╡рддрдВрддреНрд░', en: 'ЁЯПб Independent' }, icon: 'ЁЯПб', value: 'independent' },
      { id: 'with_family', label: { hi: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд╕рд╛рде', en: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж With family' }, icon: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж', value: 'with_family' },
      { id: 'open', label: { hi: 'ЁЯдЭ рдЦреБрд▓рд╛', en: 'ЁЯдЭ Open' }, icon: 'ЁЯдЭ', value: 'open' }
    ]
  },
  {
    id: 'relocation_flexibility',
    title: { hi: 'ЁЯМН рдЖрдк рдХрд╣рд╛рдБ рддрдХ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВ?', en: 'ЁЯМН How far are you willing to relocate?' },
    description: { 
      hi: 'рднреМрдЧреЛрд▓рд┐рдХ рд▓рдЪреАрд▓реЗрдкрди рдФрд░ рдпрд╛рддреНрд░рд╛ рдХреА рдЗрдЪреНрдЫрд╛ рдХреЛ рд╕рдордЭрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред', 
      en: 'Helps understand geographical flexibility and travel willingness.' 
    },
    options: [
      { id: 'same_city', label: { hi: 'ЁЯПЩя╕П рдПрдХ рд╣реА рд╢рд╣рд░', en: 'ЁЯПЩя╕П Same city' }, icon: 'ЁЯПЩя╕П', value: 'same_city' },
      { id: 'same_country', label: { hi: 'ЁЯЗоЁЯЗ│ рдПрдХ рд╣реА рджреЗрд╢', en: 'ЁЯЗоЁЯЗ│ Same country' }, icon: 'ЁЯЗоЁЯЗ│', value: 'same_country' },
      { id: 'anywhere', label: { hi: 'ЁЯМН рдХрд╣реАрдВ рднреА', en: 'ЁЯМН Anywhere' }, icon: 'ЁЯМН', value: 'anywhere' }
    ]
  },
  {
    id: 'marriage_timeline',
    title: { hi: 'ЁЯОп рдЖрдкрдХреА рд╢рд╛рджреА рдХреА рд╕рдордпрд╕реАрдорд╛ рдХреНрдпрд╛ рд╣реИ?', en: 'ЁЯОп What\'s your marriage timeline?' },
    description: { 
      hi: 'рд╢рд╛рджреА рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░реА рдФрд░ рд╕рдордп рдХреА рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдХреЛ рд╕рдордЭрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред', 
      en: 'Helps understand readiness and timeline priority for marriage.' 
    },
    options: [
      { id: 'immediately', label: { hi: 'тЪб рддреБрд░рдВрдд', en: 'тЪб Immediately' }, icon: 'тЪб', value: 'immediately' },
      { id: 'in_1_year', label: { hi: 'ЁЯУЕ 1 рд╕рд╛рд▓ рдореЗрдВ', en: 'ЁЯУЕ In 1 year' }, icon: 'ЁЯУЕ', value: 'in_1_year' },
      { id: 'open_timeline', label: { hi: 'ЁЯХР рдЦреБрд▓реА рд╕рдордпрд╕реАрдорд╛', en: 'ЁЯХР Open timeline' }, icon: 'ЁЯХР', value: 'open_timeline' }
    ]
  },
  {
    id: 'relationship_intent',
    title: { hi: 'ЁЯзб рдЖрдк рдпрд╣рд╛рдБ рдХреНрдпрд╛ рдЦреЛрдЬ рд░рд╣реЗ рд╣реИрдВ?', en: 'ЁЯзб What are you hoping to find here?' },
    description: { 
      hi: 'рд░рд┐рд╢реНрддреЗ рдХреЗ рдЗрд░рд╛рджреЗ рдФрд░ рд▓рдХреНрд╖реНрдпреЛрдВ рдХреЛ рд╕рдордЭрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред', 
      en: 'Helps understand relationship intentions and goals.' 
    },
    options: [
      { id: 'serious_marriage', label: { hi: 'ЁЯзб рдЧрдВрднреАрд░ рд░рд┐рд╢реНрддрд╛ (рд╢рд╛рджреА рддрдХ)', en: 'ЁЯзб Serious relationship leading to marriage' }, icon: 'ЁЯзб', value: 'serious_marriage' },
      { id: 'exploring', label: { hi: 'ЁЯСА рд╕рд┐рд░реНрдл рдЬрд╛рдВрдЪ рд░рд╣реЗ рд╣реИрдВ', en: 'ЁЯСА Just exploring' }, icon: 'ЁЯСА', value: 'exploring' },
      { id: 'self_growth', label: { hi: 'ЁЯзШ рдЖрддреНрдо-рд╡рд┐рдХрд╛рд╕ + рджреЗрдЦрддреЗ рд╣реИрдВ', en: 'ЁЯзШ Self-growth + see where it goes' }, icon: 'ЁЯзШ', value: 'self_growth' },
      { id: 'friendship_first', label: { hi: 'ЁЯСе рдкрд╣рд▓реЗ рджреЛрд╕реНрддреА', en: 'ЁЯСе Friendship first' }, icon: 'ЁЯСе', value: 'friendship_first' }
    ]
  }
];

export default function ShardQuestionsScreen({ onNext, onBack, initialData }: ShardQuestionsScreenProps) {
  const { language } = useLanguage();
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<string, string>>({});
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [audio, setAudio] = useState<HTMLAudioElement | null>(null);

  useEffect(() => {
    // Initialize audio
    const audioElement = new Audio('/selection_beep.mp3');
    setAudio(audioElement);
  }, []);

  const currentQuestion = shardQuestions[currentQuestionIndex];

  const handleOptionSelect = (optionId: string) => {
    setSelectedOption(optionId);
    
    // Play sound effect
    if (audio) {
      audio.currentTime = 0;
      audio.play().catch(console.error);
    }
    // Immediately submit and go to next
    setTimeout(() => {
      const newAnswers = { ...answers, [currentQuestion.id]: optionId };
      setAnswers(newAnswers);
      setSelectedOption(null);
      if (currentQuestionIndex < shardQuestions.length - 1) {
        setCurrentQuestionIndex(currentQuestionIndex + 1);
      } else {
        onNext({ shardAnswers: newAnswers });
      }
    }, 200); // slight delay for animation/sound
  };

  const handleNext = () => {
    if (selectedOption) {
      const newAnswers = { ...answers, [currentQuestion.id]: selectedOption };
      setAnswers(newAnswers);
      setSelectedOption(null);

      if (currentQuestionIndex < shardQuestions.length - 1) {
        setCurrentQuestionIndex(currentQuestionIndex + 1);
      } else {
        // All questions completed
        onNext({ shardAnswers: newAnswers });
      }
    }
  };

  const handleBack = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
      setSelectedOption(answers[shardQuestions[currentQuestionIndex - 1].id] || null);
    } else {
      onBack();
    }
  };

  const progress = ((currentQuestionIndex + 1) / shardQuestions.length) * 100;

  const TEXT = {
    hi: {
      title: 'рдЕрдкрдиреА рдкрд╕рдВрдж рдЪреБрдиреЗрдВ',
      subtitle: 'рд╣рд░ рд╕рд╡рд╛рд▓ рдЖрдкрдХреА рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдХреЛ рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░реЗрдЧрд╛',
      next: 'рдЕрдЧрд▓рд╛',
      back: 'рдкреАрдЫреЗ',
      skip: 'рдЫреЛрдбрд╝реЗрдВ',
      question: 'рдкреНрд░рд╢реНрди',
      of: 'рдХрд╛'
    },
    en: {
      title: 'Choose Your Preferences',
      subtitle: 'Each question helps build a better profile for you',
      next: 'Next',
      back: 'Back',
      skip: 'Skip',
      question: 'Question',
      of: 'of'
    }
  };

  const t = TEXT[language];

  return (
    <div className="w-full max-w-4xl mx-auto p-4">
      <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-8 shadow-xl">
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-white/80 text-sm">
              {t.question} {currentQuestionIndex + 1} {t.of} {shardQuestions.length}
            </span>
            <span className="text-white/80 text-sm">{Math.round(progress)}%</span>
          </div>
          <div className="w-full bg-white/20 rounded-full h-2">
            <motion.div
              className="bg-gradient-to-r from-pink-500 to-purple-500 h-2 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${progress}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>
        </div>

        <AnimatePresence initial={false}>
          <motion.div
            key={currentQuestionIndex}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
          >
            {/* Question */}
            <div className="text-center mb-8 mt-6">
              <h1 className="text-3xl font-bold text-white mb-4">
                {currentQuestion.title[language]}
              </h1>
              <p className="text-purple-200 text-lg max-w-2xl mx-auto">
                {currentQuestion.description[language]}
              </p>
            </div>

            {/* Options Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
              <AnimatePresence>
                {currentQuestion.options.map((option, index) => (
                  <motion.div
                    key={option.id}
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 0.8 }}
                    transition={{ delay: 0 }}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => handleOptionSelect(option.id)}
                    className={`relative cursor-pointer rounded-xl p-6 transition-all duration-300 ${
                      selectedOption === option.id
                        ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white shadow-lg scale-105'
                        : 'bg-white/10 text-white/80 hover:bg-white/20 hover:text-white'
                    }`}
                  >
                    {/* Selection indicator */}
                    {selectedOption === option.id && (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        className="absolute -top-2 -right-2 w-8 h-8 bg-green-500 rounded-full flex items-center justify-center"
                      >
                        <span className="text-white text-sm">тЬУ</span>
                      </motion.div>
                    )}

                    <div className="text-center">
                      <div className="text-4xl mb-3">{option.icon}</div>
                      <h3 className="text-lg font-semibold mb-2">
                        {option.label[language]}
                      </h3>
                    </div>

                    {/* Blur effect for unselected cards */}
                    {selectedOption && selectedOption !== option.id && (
                      <div className="absolute inset-0 bg-black/20 backdrop-blur-sm rounded-xl" />
                    )}
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          </motion.div>
        </AnimatePresence>

        {/* Navigation Buttons */}
        <div className="flex justify-between items-center">
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={handleBack}
            className="px-6 py-3 bg-white/10 text-white rounded-full font-semibold hover:bg-white/20 transition-colors"
          >
            {t.back}
          </motion.button>

          <div className="flex gap-3">
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => onNext({ shardAnswers: answers })}
              className="px-6 py-3 bg-white/10 text-white rounded-full font-semibold hover:bg-white/20 transition-colors"
            >
              {t.skip}
            </motion.button>
          </div>
        </div>
      </div>
    </div>
  );
} 