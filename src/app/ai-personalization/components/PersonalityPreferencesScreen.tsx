"use client";
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useLanguage } from '@/context/LanguageContext';
import SpeakingAvatar from './SpeakingAvatar';

interface PersonalityPreferencesScreenProps {
  onNext: (data: any) => void;
  onBack: () => void;
  initialData?: any;
}

const PersonalityPreferencesScreen: React.FC<PersonalityPreferencesScreenProps> = ({
  onNext,
  onBack,
  initialData,
}) => {
  const { language } = useLanguage();
  const [selectedPreferences, setSelectedPreferences] = useState<Record<string, string>>(
    initialData?.personalityPreferences || {}
  );

  const preferences = [
    {
      id: 'coffee_tea',
      title: {
        en: 'Coffee or Tea?',
        hi: '‡§ï‡•â‡§´‡•Ä ‡§Ø‡§æ ‡§ö‡§æ‡§Ø?'
      },
      options: [
        { id: 'coffee', label: { en: 'Coffee', hi: '‡§ï‡•â‡§´‡•Ä' }, icon: '‚òï' },
        { id: 'tea', label: { en: 'Tea', hi: '‡§ö‡§æ‡§Ø' }, icon: 'ü´ñ' }
      ]
    },
    {
      id: 'morning_night',
      title: {
        en: 'Morning Person or Night Owl?',
        hi: '‡§∏‡•Å‡§¨‡§π ‡§ï‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§Ø‡§æ ‡§∞‡§æ‡§§ ‡§ï‡•á ‡§â‡§≤‡•ç‡§≤‡•Ç?'
      },
      options: [
        { id: 'morning', label: { en: 'Morning Person', hi: '‡§∏‡•Å‡§¨‡§π ‡§ï‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø' }, icon: 'üåÖ' },
        { id: 'night', label: { en: 'Night Owl', hi: '‡§∞‡§æ‡§§ ‡§ï‡•á ‡§â‡§≤‡•ç‡§≤‡•Ç' }, icon: 'üåô' }
      ]
    },
    {
      id: 'introvert_extrovert',
      title: {
        en: 'Introvert or Extrovert?',
        hi: '‡§Ö‡§Ç‡§§‡§∞‡•ç‡§Æ‡•Å‡§ñ‡•Ä ‡§Ø‡§æ ‡§¨‡§π‡§ø‡§∞‡•ç‡§Æ‡•Å‡§ñ‡•Ä?'
      },
      options: [
        { id: 'introvert', label: { en: 'Introvert', hi: '‡§Ö‡§Ç‡§§‡§∞‡•ç‡§Æ‡•Å‡§ñ‡•Ä' }, icon: 'ü§´' },
        { id: 'extrovert', label: { en: 'Extrovert', hi: '‡§¨‡§π‡§ø‡§∞‡•ç‡§Æ‡•Å‡§ñ‡•Ä' }, icon: 'üó£Ô∏è' }
      ]
    },
    {
      id: 'planner_spontaneous',
      title: {
        en: 'Planner or Spontaneous?',
        hi: '‡§Ø‡•ã‡§ú‡§®‡§æ‡§ï‡§æ‡§∞ ‡§Ø‡§æ ‡§∏‡•ç‡§µ‡§§‡§É‡§∏‡•ç‡§´‡•Ç‡§∞‡•ç‡§§?'
      },
      options: [
        { id: 'planner', label: { en: 'Planner', hi: '‡§Ø‡•ã‡§ú‡§®‡§æ‡§ï‡§æ‡§∞' }, icon: 'üìù' },
        { id: 'spontaneous', label: { en: 'Spontaneous', hi: '‡§∏‡•ç‡§µ‡§§‡§É‡§∏‡•ç‡§´‡•Ç‡§∞‡•ç‡§§' }, icon: '‚ú®' }
      ]
    },
    {
      id: 'adventure_comfort',
      title: {
        en: 'Adventure or Comfort?',
        hi: '‡§∏‡§æ‡§π‡§∏ ‡§Ø‡§æ ‡§Ü‡§∞‡§æ‡§Æ?'
      },
      options: [
        { id: 'adventure', label: { en: 'Adventure', hi: '‡§∏‡§æ‡§π‡§∏' }, icon: 'üèîÔ∏è' },
        { id: 'comfort', label: { en: 'Comfort', hi: '‡§Ü‡§∞‡§æ‡§Æ' }, icon: 'üõãÔ∏è' }
      ]
    },
    {
      id: 'music_movies',
      title: {
        en: 'Music or Movies?',
        hi: '‡§∏‡§Ç‡§ó‡•Ä‡§§ ‡§Ø‡§æ ‡§´‡§ø‡§≤‡•ç‡§Æ‡•á‡§Ç?'
      },
      options: [
        { id: 'music', label: { en: 'Music', hi: '‡§∏‡§Ç‡§ó‡•Ä‡§§' }, icon: 'üéµ' },
        { id: 'movies', label: { en: 'Movies', hi: '‡§´‡§ø‡§≤‡•ç‡§Æ‡•á‡§Ç' }, icon: 'üé¨' }
      ]
    }
  ];

  const handleSelect = (preferenceId: string, optionId: string) => {
    setSelectedPreferences(prev => ({
      ...prev,
      [preferenceId]: optionId
    }));
  };

  const handleSubmit = () => {
    onNext({ personalityPreferences: selectedPreferences });
  };

  const TEXT = {
    hi: {
      title: '‡§Ü‡§™‡§ï‡•Ä ‡§™‡§∏‡§Ç‡§¶',
      subtitle: '‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶ ‡§ö‡•Å‡§®‡•á‡§Ç',
      next: '‡§Ö‡§ó‡§≤‡§æ',
      back: '‡§µ‡§æ‡§™‡§∏'
    },
    en: {
      title: 'Your Preferences',
      subtitle: 'Choose your preferences',
      next: 'Next',
      back: 'Back'
    }
  };

  const t = TEXT[language];

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="w-full max-w-4xl mx-auto p-4"
    >
      <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 shadow-xl">
        <SpeakingAvatar 
          text={language === 'hi' ? '‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶ ‡§ö‡•Å‡§®‡•á‡§Ç' : 'Choose your preferences'} 
          size="md" 
        />

        <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
          {preferences.map((preference, index) => (
            <motion.div
              key={preference.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="bg-white/5 rounded-xl p-4"
            >
              <h3 className="text-lg font-semibold text-white/90 mb-4">
                {preference.title[language]}
              </h3>
              <div className="grid grid-cols-2 gap-3">
                {preference.options.map(option => (
                  <motion.button
                    key={option.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => handleSelect(preference.id, option.id)}
                    className={`p-4 rounded-lg flex flex-col items-center gap-2 transition-all ${
                      selectedPreferences[preference.id] === option.id
                        ? 'bg-pink-500 text-white'
                        : 'bg-white/10 text-white/80 hover:bg-white/20'
                    }`}
                  >
                    <span className="text-2xl">{option.icon}</span>
                    <span className="text-sm font-medium">{option.label[language]}</span>
                  </motion.button>
                ))}
              </div>
            </motion.div>
          ))}
        </div>

        <div className="mt-8 flex justify-between">
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={onBack}
            className="px-6 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-colors"
          >
            {t.back}
          </motion.button>
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={handleSubmit}
            className="px-6 py-2 bg-pink-500 hover:bg-pink-600 text-white rounded-lg transition-colors"
          >
            {t.next}
          </motion.button>
        </div>
      </div>
    </motion.div>
  );
};

export default PersonalityPreferencesScreen; 